// Importa os módulos necessários do Three.js usando os caminhos definidos no import map
import * as THREE from 'three';
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';

// Variáveis globais para a cena 3D e elementos da interface
const container = document.getElementById('three-scene-container');
const fileInput = document.getElementById('file-input');
const fileNameSpan = document.getElementById('file-name');

let scene, camera, renderer, controls, currentModel;

// --- Funções de Inicialização da Cena 3D ---
function init() {
    // 1. Criação da Cena
    scene = new THREE.Scene();
    scene.background = new THREE.Color(0x2c3e50);

    // 2. Criação da Câmera
    camera = new THREE.PerspectiveCamera(
        75,
        container.clientWidth / container.clientHeight,
        0.1,
        1000
    );
    camera.position.set(0, 1, 3);

    // 3. Criação do Renderizador
    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(container.clientWidth, container.clientHeight);
    renderer.setPixelRatio(window.devicePixelRatio);
    container.appendChild(renderer.domElement);

    // 4. Criação dos Controles de Órbita
    controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.25;
    controls.screenSpacePanning = false;
    controls.maxPolarAngle = Math.PI / 2;
    

    // 5. Adiciona as luzes à cena
    addLights();

    // 6. Inicia o loop de animação
    animate();

    // Carregar um modelo padrão ao iniciar (opcional)
    // loadModel('modelos/Box.glb');
}

function addLights() {
    // Luz ambiente mais intensa
    const ambientLight = new THREE.AmbientLight(0xffffff, 1.2); // Aumentei a intensidade para 1.2
    scene.add(ambientLight);

    // Luz direcional principal (como sol)
    const directionalLight1 = new THREE.DirectionalLight(0xffffff, 1.5);
    directionalLight1.position.set(5, 10, 7);
    directionalLight1.castShadow = true; // Ativa sombras (opcional)
    scene.add(directionalLight1);

    // Luz direcional secundária (preenche sombras)
    const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight2.position.set(-5, 5, -5);
    scene.add(directionalLight2);

    // Luz pontual adicional
    const pointLight = new THREE.PointLight(0xffffff, 0.5, 100);
    pointLight.position.set(0, 5, 0);
    scene.add(pointLight);

    // Adiciona um helper para visualizar as luzes (opcional - remova em produção)
    // const lightHelper1 = new THREE.DirectionalLightHelper(directionalLight1, 1);
    // scene.add(lightHelper1);
    // const lightHelper2 = new THREE.DirectionalLightHelper(directionalLight2, 1);
    // scene.add(lightHelper2);

}
function animate() {
    requestAnimationFrame(animate);
    controls.update();
    renderer.render(scene, camera);
}

function onWindowResize() {
    camera.aspect = container.clientWidth / container.clientHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(container.clientWidth, container.clientHeight);
    controls.update();
}

// --- Função Principal para Carregar Modelos 3D ---
function loadModel(source, isLocalFile = false) {
    if (currentModel) {
        scene.remove(currentModel);
        currentModel.traverse(object => {
            if (object.geometry) object.geometry.dispose();
            if (object.material) {
                if (Array.isArray(object.material)) {
                    object.material.forEach(material => material.dispose());
                } else {
                    object.material.dispose();
                }
            }
            if (object.texture) object.texture.dispose();
        });
        renderer.renderLists.dispose();
    }

    const loader = new GLTFLoader();

    if (isLocalFile) {
        const reader = new FileReader();
        reader.onload = (event) => {
            loader.parse(event.target.result, '', (gltf) => {
                handleLoadedModel(gltf);
            }, (error) => {
                console.error('Erro ao parsear arquivo GLB/GLTF local:', error);
                alert('Erro ao carregar o arquivo 3D. Verifique se é um GLB/GLTF válido.');
            });
        };
        reader.readAsArrayBuffer(source);
    } else {
        loader.load(
            source,
            handleLoadedModel,
            (xhr) => {
                console.log((xhr.loaded / xhr.total * 100) + '% carregado');
            },
            (error) => {
                console.error('Erro ao carregar modelo 3D:', error);
                alert('Erro ao carregar o modelo 3D de exemplo. Tente novamente.');
            }
        );
    }
}

function handleLoadedModel(gltf) {
    currentModel = gltf.scene;
    scene.add(currentModel);

    // Calcula a bounding box do modelo
    const bbox = new THREE.Box3().setFromObject(currentModel);
    const center = bbox.getCenter(new THREE.Vector3());
    const size = bbox.getSize(new THREE.Vector3());

    // Centraliza o modelo movendo-o para a origem
    currentModel.position.x = -center.x;
    currentModel.position.y = -center.y;
    currentModel.position.z = -center.z;

    // Calcula a distância ideal da câmera
    const maxDim = Math.max(size.x, size.y, size.z);
    const fov = camera.fov * (Math.PI / 180);
    let cameraZ = Math.abs((maxDim / 2) / Math.tan(fov / 2)) * 1.5; // Aumentei o padding para 1.5

    // Ajusta a posição da câmera
    camera.position.z = cameraZ;
    camera.position.y = size.y * 0.5; // Eleva a câmera para ver melhor

    // Configura o alvo dos controles para o centro do modelo
    controls.target.set(0, size.y * 0.25, 0); // Ajuste fino para melhor enquadramento
    controls.update();

    // Adiciona um grid helper para referência (opcional)
    const gridHelper = new THREE.GridHelper(maxDim * 2, 20, 0x555555, 0x333333);
    scene.add(gridHelper);
    gridHelper.position.y = -size.y / 2; // Posiciona o grid na base do modelo
}

// --- Event Listeners ---
fileInput.addEventListener('change', (event) => {
    const file = event.target.files[0];
    if (file) {
        fileNameSpan.textContent = `Arquivo: ${file.name}`;
        loadModel(file, true);
    } else {
        fileNameSpan.textContent = 'Nenhum arquivo selecionado';
    }
});

window.addEventListener('resize', onWindowResize, false);

// Inicia a cena 3D quando a página é carregada
window.onload = init;